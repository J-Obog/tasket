// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	types "github.com/J-Obog/tasket/src/types"
	mock "github.com/stretchr/testify/mock"
)

// ILogStore is an autogenerated mock type for the ILogStore type
type ILogStore struct {
	mock.Mock
}

// GetByFilter provides a mock function with given fields: taskId, options
func (_m *ILogStore) GetByFilter(taskId string, options types.LogOptions) ([]types.Log, error) {
	ret := _m.Called(taskId, options)

	var r0 []types.Log
	if rf, ok := ret.Get(0).(func(string, types.LogOptions) []types.Log); ok {
		r0 = rf(taskId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, types.LogOptions) error); ok {
		r1 = rf(taskId, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTask provides a mock function with given fields: taskId
func (_m *ILogStore) GetByTask(taskId string) ([]types.Log, error) {
	ret := _m.Called(taskId)

	var r0 []types.Log
	if rf, ok := ret.Get(0).(func(string) []types.Log); ok {
		r0 = rf(taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: log
func (_m *ILogStore) Insert(log types.Log) error {
	ret := _m.Called(log)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Log) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewILogStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewILogStore creates a new instance of ILogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILogStore(t mockConstructorTestingTNewILogStore) *ILogStore {
	mock := &ILogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

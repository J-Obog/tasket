// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	types "github.com/J-Obog/tasket/src/types"
	mock "github.com/stretchr/testify/mock"
)

// ITaskManager is an autogenerated mock type for the ITaskManager type
type ITaskManager struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: userId, newTask
func (_m *ITaskManager) CreateTask(userId string, newTask types.NewTask) error {
	ret := _m.Called(userId, newTask)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.NewTask) error); ok {
		r0 = rf(userId, newTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: id
func (_m *ITaskManager) GetTaskById(id string) (*types.Task, error) {
	ret := _m.Called(id)

	var r0 *types.Task
	if rf, ok := ret.Get(0).(func(string) *types.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksByFilter provides a mock function with given fields: userId, options
func (_m *ITaskManager) GetTasksByFilter(userId string, options types.TaskOptions) ([]types.Task, error) {
	ret := _m.Called(userId, options)

	var r0 []types.Task
	if rf, ok := ret.Get(0).(func(string, types.TaskOptions) []types.Task); ok {
		r0 = rf(userId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, types.TaskOptions) error); ok {
		r1 = rf(userId, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTask provides a mock function with given fields: id
func (_m *ITaskManager) StopTask(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTask provides a mock function with given fields: id, updatedTask
func (_m *ITaskManager) UpdateTask(id string, updatedTask types.UpdatedTask) error {
	ret := _m.Called(id, updatedTask)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.UpdatedTask) error); ok {
		r0 = rf(id, updatedTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskStatus provides a mock function with given fields: id, status
func (_m *ITaskManager) UpdateTaskStatus(id string, status types.TaskStatus) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.TaskStatus) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewITaskManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewITaskManager creates a new instance of ITaskManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITaskManager(t mockConstructorTestingTNewITaskManager) *ITaskManager {
	mock := &ITaskManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

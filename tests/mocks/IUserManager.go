// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	types "github.com/J-Obog/tasket/src/types"
	mock "github.com/stretchr/testify/mock"
)

// IUserManager is an autogenerated mock type for the IUserManager type
type IUserManager struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: userReq
func (_m *IUserManager) CreateUser(userReq types.NewUser) error {
	ret := _m.Called(userReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.NewUser) error); ok {
		r0 = rf(userReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *IUserManager) DeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *IUserManager) GetUserByEmail(email string) (*types.User, error) {
	ret := _m.Called(email)

	var r0 *types.User
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id
func (_m *IUserManager) GetUserById(id string) (*types.User, error) {
	ret := _m.Called(id)

	var r0 *types.User
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIUserManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserManager creates a new instance of IUserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserManager(t mockConstructorTestingTNewIUserManager) *IUserManager {
	mock := &IUserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IQueue is an autogenerated mock type for the IQueue type
type IQueue struct {
	mock.Mock
}

// Pull provides a mock function with given fields:
func (_m *IQueue) Pull() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: serializable
func (_m *IQueue) Push(serializable interface{}) error {
	ret := _m.Called(serializable)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(serializable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewIQueue creates a new instance of IQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIQueue(t mockConstructorTestingTNewIQueue) *IQueue {
	mock := &IQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

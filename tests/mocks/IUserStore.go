// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	types "github.com/J-Obog/tasket/src/types"
	mock "github.com/stretchr/testify/mock"
)

// IUserStore is an autogenerated mock type for the IUserStore type
type IUserStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *IUserStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: email
func (_m *IUserStore) GetByEmail(email string) (*types.User, error) {
	ret := _m.Called(email)

	var r0 *types.User
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *IUserStore) GetById(id string) (*types.User, error) {
	ret := _m.Called(id)

	var r0 *types.User
	if rf, ok := ret.Get(0).(func(string) *types.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: user
func (_m *IUserStore) Insert(user types.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUserStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserStore creates a new instance of IUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserStore(t mockConstructorTestingTNewIUserStore) *IUserStore {
	mock := &IUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

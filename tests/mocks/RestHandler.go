// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	rest "github.com/J-Obog/tasket/src/rest"
	mock "github.com/stretchr/testify/mock"
)

// RestHandler is an autogenerated mock type for the RestHandler type
type RestHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: req
func (_m *RestHandler) Execute(req rest.RestRequest) (rest.RestResponse, int) {
	ret := _m.Called(req)

	var r0 rest.RestResponse
	if rf, ok := ret.Get(0).(func(rest.RestRequest) rest.RestResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(rest.RestResponse)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(rest.RestRequest) int); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewRestHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewRestHandler creates a new instance of RestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRestHandler(t mockConstructorTestingTNewRestHandler) *RestHandler {
	mock := &RestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	models "github.com/J-Obog/tasket/src/models"
	mock "github.com/stretchr/testify/mock"
)

// ILogManager is an autogenerated mock type for the ILogManager type
type ILogManager struct {
	mock.Mock
}

// CreateLog provides a mock function with given fields: taskId, logReq
func (_m *ILogManager) CreateLog(taskId string, logReq models.NewLog) {
	_m.Called(taskId, logReq)
}

// GetLogsByFilter provides a mock function with given fields: taskId, filter
func (_m *ILogManager) GetLogsByFilter(taskId string, filter models.LogOptions) ([]models.Log, error) {
	ret := _m.Called(taskId, filter)

	var r0 []models.Log
	if rf, ok := ret.Get(0).(func(string, models.LogOptions) []models.Log); ok {
		r0 = rf(taskId, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.LogOptions) error); ok {
		r1 = rf(taskId, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogsByTask provides a mock function with given fields: taskId
func (_m *ILogManager) GetLogsByTask(taskId string) ([]models.Log, error) {
	ret := _m.Called(taskId)

	var r0 []models.Log
	if rf, ok := ret.Get(0).(func(string) []models.Log); ok {
		r0 = rf(taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewILogManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewILogManager creates a new instance of ILogManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILogManager(t mockConstructorTestingTNewILogManager) *ILogManager {
	mock := &ILogManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
